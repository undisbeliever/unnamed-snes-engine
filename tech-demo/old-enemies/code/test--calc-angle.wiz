// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";

import "engine/common/math";

import "gen/entities";
import "gen/cosine-tables";


namespace entities {
namespace test__calc_angle {

in wram7e {

var SoA_startX      : [ u16 ; N_ENTITIES  ] in SoA.var_0;
var SoA_startX_px   : [ u8  ; SoA.BA_SIZE ] in SoA.var_0_h;

var SoA_startY      : [ u16 ; N_ENTITIES  ] in SoA.var_1;
var SoA_startY_px   : [ u8  ; SoA.BA_SIZE ] in SoA.var_1_h;

var SoA_parameter   : [ u8  ; SoA.BA_SIZE ] in SoA.var_2_l;

}


in code {



// Entity init routine.
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in a) {

    mem16();
    #[mem16] {
        SoA_startX[unaligned y] = aa = SoA.xPos_u16[unaligned y];
        SoA_startY[unaligned y] = aa = SoA.yPos_u16[unaligned y];
    }
    mem8();

    a = x;
    SoA_parameter[y] = a;
    if zero {
        spawn_entity__clobbers_y(a = SoA.xPos_px[y],
                                 a = SoA.yPos_px[y],
                                 a = EntityTypes.test__calc_angle as u8,
                                 y = 1);
    }
}



// Entity process routine.
//
// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {

let CosineTable = CosineTables.CalcAngleTest;


    a = SoA_parameter[y];
    if !zero {
        x = calc_angle_32x2(a = SoA_startX_px[unaligned y],
                            a = SoA_startY_px[unaligned y],
                            player.xPos.px,
                            player.yPos.px);

        y = currentEntityId;

        mem16();
        #[mem16] {
            SoA.xPos_u16[unaligned y] = aa = SoA_startX[unaligned y] + CosineTable[unaligned x] as u16;

            #[idx16] {
                xx = aa = (xx + CosineTables.SINE_OFFSET) & CosineTables.TABLE_MASK;
            }

            SoA.yPos_u16[unaligned y] = aa = SoA_startY[unaligned y] + CosineTable[unaligned x] as u16;
        }
        mem8();
    }
}

}

}
}

