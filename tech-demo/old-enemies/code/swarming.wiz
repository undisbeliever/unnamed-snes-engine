// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";

import "engine/common/math";

import "gen/enums";
import "gen/entities";


namespace entities {
namespace swarming {


// ::TODO store speed in entity SoA::
let FACING_SPEED = 0x00c0;
let ALT_SPEED    = 0x0060;


// Swarming entity will directly target the player if the Manhattan distance to
// the player is less than this value.
//
// (Manhattan distance)
let DIRECTLY_TARGET_PLAYER_THRESHOLD = 14;


let X_ALT_VELOCITY_THRESHOLD = 8;
let Y_ALT_VELOCITY_THRESHOLD = 2;

// Threshold before turning 90 degrees.
//
// NOTE:  If this value is too large the swarming entity can occasionally
// erroneously cycle north-south or east-west near the player instead of
// turning towards the player.
//
// Some quick and incomplete testing shows a threshold of 8 does not exhibit this bug.
let X_TURN_THRESHOLD = 7;
let Y_TURN_THRESHOLD = 5;


let X_TURNAROUND_THRESHOLD = 11;
let Y_TURNAROUND_THRESHOLD = 8;


let HURT_TIME_IN_FRAMES = 20;
let HURT_KNOCKBACK_TIME_IN_FRAMES = 10;
// Entity will be stunned for `HURT_TIME - HURT_KNOCKBACK_TIME` frames.


let RECOIL_TIME_IN_FRAMES = 8;


enum State : u8 {
    FACING_SOUTH =  0,
    FACING_NORTH =  2,
    FACING_EAST  =  4,
    FACING_WEST  =  6,
    HURT         =  8,
    RECOIL       = 10,
};


let HURT_MS_ANIMATION_OFFSET            = ms_animations.hurt_south;



in wram7e {


var SoA_state            : [ State     ; SoA.BA_SIZE ] in SoA.var_0_l;


// Offset between player's position and the entity's target.
var SoA_targetOffset_x   : [ i8 ; SoA.BA_SIZE ] in SoA.var_1_l;
var SoA_targetOffset_y   : [ i8 ; SoA.BA_SIZE ] in SoA.var_1_h;

// Countdown timer for RECOIL state
// (time remaining in frames)
var SoA_countdownTimer   : [ u8 ; SoA.BA_SIZE ] in SoA.var_2_l;


// Location to swarm to.
//
// Will be invalidated on a function call outside this entity.
//
// (u8 position)
var _target_x : u8 in zpTmp_byte_0;
var _target_y : u8 in zpTmp_byte_1;

// Absolute difference between target and entity position.
//
// Will be invalidated on a function call outside this entity.
//
// (2x u8)
var _absDifference_x : u8 in zpTmp_byte_2;
var _absDifference_y : u8 in zpTmp_byte_3;


// Temporary variable
//
// Will be invalidated on a function call outside this entity.
//
// Declared here as the other zpTmp variables are declared here
var _tmp : u8 in zpTmp_byte_4;


// Index into the last entry read in `OffsetTable_x` and `OffsetTable_y`.
var offsetTableIndex : u8;

}



in rodata0 {
    // SoA table of player/target offsets.
    //
    // Values were generated and shuffled using a python script.
    const _OffsetTable_x : [ i8 ; 64 ] = [-4, 11, -6, -4, 14, -10, 5, -9, 7, -6, 9, -2, 1, 4, -8, -5, 11, -5, 2, -11, 1, -6, 9, -3, -1, -1, 3, 6, 2, 8, 11, -2, 14, -13, -2, -7, 2, 6, 6, 7, 1, -1, -7, -4, -9, -9, -11, 5, -14, 10, 2, 4, 13, -14, -9, -2, 4, -11, -8, 9, 9, 8, -7, 7];
    const _OffsetTable_y : [ i8 ; 64 ] = [-1, 6, 8, -11, -1, 8, -7, -2, -2, -8, -6, 10, -6, 1, 4, 7, 2, -4, 10, -6, -8, 10, -1, -7, 6, 11, 7, -8, -3, 9, -2, -6, 3, 5, -10, -6, 6, 8, -10, 1, -11, 8, -1, 5, 6, 1, -2, 4, 1, -8, -10, -5, -5, -3, -5, 3, 11, 2, -9, 2, 5, -4, 2, 6];

    let OffsetTable_x = far &_OffsetTable_x as far *const i8;
    let OffsetTable_y = far &_OffsetTable_y as far *const i8;
}


in code {


// Transforms an entity into a spawning entity.
//
// ASSUMES: entityId is an active entity.
//
// Always returns true.
//
// DB = 0x7e
#[mem8, idx8]
func change_to_swarming_entity(entityId : u8 in y) {
    set_entity_function(y, EntityFunction.swarming);

    return _reset(y);
}


// Transforms an entity into a spawning entity.
//
// ASSUMES: entity collided with sword hitbox and `collisionCentre` is valid.
//
// ASSUMES: entityId is an active entity.
//
// Always returns true.
//
// DB = 0x7e
#[mem8, idx8]
func change_to_swarming_entity__player_sword_collision(entityId : u8 in y) {

    a = EntityFunction.swarming as u8;
    SoA.entityFunction[unaligned y] = a as EntityFunction;

    // `process__hurt` will call `_reset` when the countdown timer ends.
    set_state__hurt(y);
}



// (`init` function does not use a parameter)
let init = _reset as func(entityId : u8 in y, parameter : u8 in a);



// Reset entity state.
//
// DB = 0x7e
#[mem8, idx8]
func _reset(entityId : u8 in y) {

    // Read the next value in OffsetTable
    x = offsetTableIndex;
    x++;
    if x >= sizeof(typeof(OffsetTable_x)) + 1{
        x = 0;
    }
    offsetTableIndex = x;

    a = OffsetTable_x[x] as u8;
    SoA_targetOffset_x[y] = a as i8;

    a = OffsetTable_y[x] as u8;
    SoA_targetOffset_y[y] = a as i8;


    // Determine which direction best faces the player.

    a = SoA.xPos_px[y] - player.xPos.px;
    if !carry {
        a = negate8(a);
    }
    _absDifference_x = a;

    a = SoA.yPos_px[y] - player.yPos.px;
    if !carry {
        a = negate8(a);
    }

    if a >= _absDifference_x {
        a = SoA.yPos_px[y];
        if a >= player.yPos.px {
            ^return set_direction_north(y);
        }
        else {
            ^return set_direction_south(y);
        }
    }
    else {
        a = SoA.xPos_px[y];
        if a >= player.xPos.px {
            ^return set_direction_west(y);
        }
    }

    ^return set_direction_east(y);
}



// Entity process routine.
//
// Called once per frame.
//
// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {

    base.process_collisions(y);


    if collisionState $ CollisionState.ANY_PLAYER_WEAPON_BIT {
        set_state__hurt(y);
    }

    if collisionState $ CollisionState.PLAYER_HURTBOX_BIT {
        base.hurt_player__collision(y);

        set_state__recoil__inline(y);
    }


    // Calculate Manhattan distance to player
    a = SoA.xPos_px[y] - player.xPos.px;
    if !carry {
        a = negate8(a);
    }
    _absDifference_x = a;

    a = SoA.yPos_px[y] - player.yPos.px;
    if !carry {
        a = negate8(a);
    }
    a += _absDifference_x;

    if a < DIRECTLY_TARGET_PLAYER_THRESHOLD {
        // Entity is close to the player.  Directly target player.

        _target_x = a = player.xPos.px;
        _target_y = a = player.yPos.px;

        a -= SoA.yPos_px[y];
        if !carry {
            a = negate8(a);
        }
        _absDifference_y = a;
    }
    else {
        // Entity is not close to the player.

        // Add offset to player position to create target position (with wrapping)
        a = SoA_targetOffset_x[y] as u8;
        if negative {
            a += player.xPos.px;
            if !carry { a = 0; }
        }
        else {
            a += player.xPos.px;
            if carry { a = 0xff; }
        }
        _target_x = a;

        a = SoA_targetOffset_y[y] as u8;
        if negative {
            a += player.yPos.px;
            if !carry { a = 0; }
        }
        else {
            a += player.yPos.px;
            if carry { a = 0xff; }
        }
        _target_y = a;


        // Calculate absolute difference to target
        a = SoA.xPos_px[y] - _target_x;
        if !carry {
            a = negate8(a);
        }
        _absDifference_x = a;

        a = SoA.yPos_px[y] - _target_y;
        if !carry {
            a = negate8(a);
        }
        _absDifference_y = a;
    }


    x = SoA_state[y] as u8;
    return process__state_functions[unaligned x](y);
}


const process__state_functions = [
    process__facing_south,
    process__facing_north,
    process__facing_east,
    process__facing_west,
    process__hurt,
    process__recoil,
];



// KEEP: Y
// ALWAYS returns true
//
// DB = 0x7e
#[mem8, idx8]
func _update_velocity__facing_north_or_south(entityId : u8 in y) {
    x = a = SoA.xPos_px[unaligned y] - _target_x;

    mem16();
    #[mem16] {
        aa = 0;

        // carry contains comparison from subtraction above
        if carry {
            if x >= X_ALT_VELOCITY_THRESHOLD + 1 {
                aa = -ALT_SPEED as u16;
            }
        }
        else {
            if x < -X_ALT_VELOCITY_THRESHOLD as u8 {
                aa = ALT_SPEED;
            }
        }

        SoA.xVelocity[unaligned y] = aa;
    }
    mem8();
}



// KEEP: Y
// ALWAYS returns true
//
// DB = 0x7e
#[mem8, idx8]
func _update_velocity__facing_east_or_west(entityId : u8 in y) {
    x = a = SoA.yPos_px[unaligned y] - _target_y;

    mem16();
    #[mem16] {
        aa = 0;

        // carry contains comparison from subtraction above
        if carry {
            if x >= Y_ALT_VELOCITY_THRESHOLD + 1 {
                aa = -ALT_SPEED as u16;
            }
        }
        else {
            if x < -Y_ALT_VELOCITY_THRESHOLD as u8 {
                aa = ALT_SPEED;
            }
        }

        SoA.yVelocity[unaligned y] = aa;
    }
    mem8();
}



// DB = 0x7e
#[mem8, idx8]
func process__facing_south(entityId : u8 in y) {

    a = _absDifference_y + Y_TURN_THRESHOLD;
    if a < _absDifference_x {
        ^return set_direction_east_or_west(y);
    }

    a = SoA.yPos_px[unaligned y];
    if a >= _target_y {
        a -= Y_TURNAROUND_THRESHOLD;
        if !carry { a = 0; }
        if a >= _target_y {
            ^return set_direction_north(y);
        }
    }

    return _update_velocity__facing_north_or_south(y);
}



// DB = 0x7e
#[mem8, idx8]
func process__facing_north(entityId : u8 in y) {

    a = _absDifference_y + Y_TURN_THRESHOLD;
    if a < _absDifference_x {
        ^return set_direction_east_or_west(y);
    }

    a = SoA.yPos_px[unaligned y];
    if a < _target_y {
        a += Y_TURNAROUND_THRESHOLD;
        if carry { a = 0xff; }
        if a < _target_y {
            ^return set_direction_south(y);
        }
    }

    ^return _update_velocity__facing_north_or_south(y);
}



// DB = 0x7e
#[mem8, idx8]
func process__facing_east(entityId : u8 in y) {

    a = _absDifference_x + X_TURN_THRESHOLD;
    if a < _absDifference_y {
        ^return set_direction_north_or_south(y);
    }

    a = SoA.xPos_px[unaligned y];
    if a >= _target_x {
        a -= X_TURNAROUND_THRESHOLD;
        if !carry { a = 0; }
        if a >= _target_x {
            ^return set_direction_west(y);
        }
    }

    ^return _update_velocity__facing_east_or_west(y);
}



// DB = 0x7e
#[mem8, idx8]
func process__facing_west(entityId : u8 in y) {

    a = _absDifference_x + X_TURN_THRESHOLD;
    if a < _absDifference_y {
        ^return set_direction_north_or_south(y);
    }

    a = SoA.xPos_px[unaligned y];
    if a < _target_x {
        a += X_TURNAROUND_THRESHOLD;
        if carry { a = 0xff; }
        if a < _target_x {
            ^return set_direction_east(y);
        }
    }

    ^return _update_velocity__facing_east_or_west(y);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_south(entityId : u8 in y) {
    x = y;

    SoA_state[x] = State.FACING_SOUTH;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = 0;
        SoA.yVelocity[unaligned x] = aa = FACING_SPEED as u16;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_south);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_north(entityId : u8 in y) {
    x = y;

    a = State.FACING_NORTH as u8;
    SoA_state[x] = a as State;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = 0;
        SoA.yVelocity[unaligned x] = aa = -FACING_SPEED as u16;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_north);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_east(entityId : u8 in y) {
    x = y;

    a = State.FACING_EAST as u8;
    SoA_state[x] = a as State;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = aa = FACING_SPEED;
        SoA.yVelocity[unaligned x] = 0;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_east);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_west(entityId : u8 in y) {
    x = y;

    a = State.FACING_WEST as u8;
    SoA_state[x] = a as State;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = aa = -FACING_SPEED as u16;
        SoA.yVelocity[unaligned x] = 0;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_west);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_north_or_south(entityId : u8 in y) {
    a = SoA.yPos_px[y];

    return set_direction_south(y) if a < _target_y;
    return set_direction_north(y);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_east_or_west(entityId : u8 in y) {
    a = SoA.xPos_px[y];

    return set_direction_east(y) if a < _target_x;
    return set_direction_west(y);
}



// Hurt
// ====

// ASSUMES: entity collided with sword hitbox and `collisionCentre` is valid.
//
// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__hurt(entityId : u8 in y) {
    a = SoA_state[y] as u8 >>> 1;
    if a >= 4 {
        a = 0;
    }
    set_ms_animation(y, a = a | HURT_MS_ANIMATION_OFFSET);

    queue_sound_effect(sound_effects.enemy_hurt);

    a = State.HURT as u8;
    SoA_state[y] = a as State;

    SoA_countdownTimer[y] = a = HURT_TIME_IN_FRAMES;

    ^return base.take_damage_from_player_attack_with_knockback(y, base.SwordCollisionSpeed.FAST);
}



// DB = 0x7e
#[mem8, idx8]
func process__hurt(entityId : u8 in y) {

let RESET_VELOCITY_TIME = HURT_TIME_IN_FRAMES - HURT_KNOCKBACK_TIME_IN_FRAMES;

    a = SoA_countdownTimer[y];
    if !zero {
        if a == RESET_VELOCITY_TIME {
            // must not modify a.
            mem16();
            #[mem16] {
                x = y;
                SoA.xVelocity[unaligned x] = 0;
                SoA.yVelocity[unaligned x] = 0;
            }
            mem8();
        }
        a--;
        SoA_countdownTimer[y] = a;

        return;
    }
    else {
        ^return _reset(y);
    }
}



// RECOIL
// ======


// KEEP: Y
//
// DB = 0x7e
#[mem8, idx8]
inline func set_state__recoil__inline(entityId : u8 in y) {
    a = State.RECOIL as u8;
    if a != SoA_state[y] as u8 {
        SoA_state[y] = a as State;

        // Invert velocity
        mem16();
        #[mem16] {
            SoA.xVelocity[unaligned y] = aa = 0 - SoA.xVelocity[unaligned y];
            SoA.yVelocity[unaligned y] = aa = 0 - SoA.yVelocity[unaligned y];
        }
        mem8();

        SoA_countdownTimer[unaligned y] = a = RECOIL_TIME_IN_FRAMES - 1;

        stop_ms_animation(y);
    }
}


let process__recoil = process__hurt;


}

}
}

