// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";

import "engine/common/math";
import "engine/audio";
import "../rng";
import "../player";

import "gen/enums";
import "gen/cosine-tables";
import "gen/entities";


namespace entities {
namespace boss {


// ::TODO make a harder version of this boss that spawns hopping pawns that can be hurt by the player's sword::


enum State : u8 {
    HURT                      =  0,
    DEAD                      =  2,

    WAITING_ON_GROUND         =  4,
    RISING                    =  6,
    RANDOM_DIRECTION          =  8,
    SEEKING_PLAYER            = 10,
    FALLING                   = 12,
    LANDED                    = 14,
    ON_GROUND_TARGET_PLAYER   = 16,
    THROW_BOMBS_1             = 18,
    THROW_BOMBS_2             = 20,
};


// Boss can hurt the player when zPos is lower then this value
let MIN_ZPOS_TO_HURT_PLAYER = 14;

// Maximum zPos the boss can be hurt by an explosion
let MAX_ZPOS_EXPLOSION_DAMAGE = 18;

// Height above the player to hover
let HOVER_ZPOS_HEIGHT = 36;


// The manhattan distance before falling
let SEEKING_TARGET_ACCURACY = 7;

// The manhattan distance when switching to fast velocity
let SEEKING_FASTER_VELOCITY_DISANACE = 32;


// Rising zPos Velocity
// (subpixels per frame)
let RISING_VELOCITY = 0x00cc;

// Falling zPos acceleration
// (subpixels per frame per frame)
let FALLING_GRAVITY = 0x00d5;

// Velocity of the side-to-side shake before falling to the ground
// (subpixels per frame)
let FALLING_ANTICIPATION_VELOCITY = 0x0180;


// Minimum distance to the boss when it lands for it to hurt the player
let LANDED_HURT_PLAYER_DISTANCE = 16;



// Delay (in frames) from landing on the ground to rising
// (time in frames)
let ON_GROUND_SHORT_DELAY   = 30;
let ON_GROUND_MEDIUM_DELAY  = 60;
let ON_GROUND_LONG_DELAY    = 90;


// (time in frames)
let THROW_BOMB_DELAY        = 40;
let THROW_BOMB_COOLDOWN     = 40;



// Number of frame in the random direction state before switching state
let N_RANDOM_DIRECTION_FRAMES = 40;


// Maximum number of seeking frames before switching to falling state
let MAX_SEEKING_FRAMES = 90;


// Number of frames to shake before falling
let N_FALLING_ANTICIPATION_FRAMES = 30;

// Number of falling anticipation frames before the boss heads directly for the player
let N_FALLING_SEEKING_FRAMES = 16;


// Needs to be longer then shaking in the air, player needs more reaction time to dodge.
let N_ON_GROUND_SHAKING_FRAMES = 40;


// Number of frames after landing before starting the next action
let N_LANDING_RECOVERY_FRAMES = 20;



in wram7e_roomstate {

var SoA_state            : [ State     ; SoA.BA_SIZE ] in SoA.var_0_l;

var SoA_timer            : [ u8        ; SoA.BA_SIZE ] in SoA.var_1_l;

var SoA_zPos_sx          : [ u8        ; SoA.BA_SIZE ] in SoA.var_1_h;

var SoA_zVelocity        : [ u16       ; N_ENTITIES ]  in SoA.var_2;
var SoA_zVelocity_sx     : [ u8        ; SoA.BA_SIZE ] in SoA.var_2_l;
var SoA_zVelocity_px     : [ u8        ; SoA.BA_SIZE ] in SoA.var_2_h;

var SoA_globalFlag       : [ gs.gf     ; SoA.BA_SIZE ] in SoA.var_3_l;

}


in code {

// parameter = boss destroyed global flag
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : gs.gf in a) {

    SoA_globalFlag[y] = a as gs.gf;
    zero = is_global_flag_clear_a(a as gs.gf);
    if !zero {
        // The boss has already been defeated, do not show it.
        x = y;
        SoA.health[x] = 0;
        return;
    }


    a = SoA.zPos[y];
    if zero {
        ^return set_state__waiting_on_ground(y);
    }
    else {
        ^return set_state__rising(y);
    }
}



// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {

    a = SoA.zPos[y];
    if a >= MIN_ZPOS_TO_HURT_PLAYER {
        // Boss above the player, neither can hurt the other
        move_entity_and_tile_collision_test__bounded(y);
        collisionState = 0;

        a = SoA.zPos[y];
        if a < MAX_ZPOS_EXPLOSION_DAMAGE + 1 {
            carry = base.test_player_bomb_collision(y);
            if carry {
                collided_with_player_bomb(y);
            }
        }
    }
    else {
        // ::TODO add zPos checks to MetaTile collisions::
        base.process_collisions(y);

        if collisionState $ CollisionState.ANY_PLAYER_WEAPON_BIT {
            a = collisionState;
            if a & CollisionState.PLAYER_BOMB != 0 {
                collided_with_player_bomb(y);
            }
            else {
                // Non bomb weapon
                collided_with_player_weapon__inline(y);
            }
        }

        if collisionState $ CollisionState.PLAYER_HURTBOX_BIT {
            base.hurt_player__collision(y);
        }

    }


    x = SoA_state[y] as u8;
    return process__state_functions[unaligned x](y);
}


const process__state_functions = [
    process__hurt,
    process__dead,
    process__waiting_on_ground,
    process__rising,
    process__random_direction,
    process__seeking_player,
    process__falling,
    process__landed,
    process__on_ground_target_player,
    process__throw_bombs_1,
    process__throw_bombs_2,
];



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_random_state(entityId : u8 in y) {

    set_ms_animation(y, ms_animations.standing);

    a = SoA.zPos[y];
    if !zero {
        // entity above the ground

        let MASK = (sizeof(typeof(__set_random_state__hovering_ft)) - 1) & (~1);

        a = rng.random();
        x = a = a & MASK;
        ^return __set_random_state__hovering_ft[unaligned x](y);
    }
    else {
        // entity on the ground

        let MASK = (sizeof(typeof(__set_random_state__on_ground_ft)) - 1) & (~1);

        a = rng.random();
        x = a = a & MASK;
        ^return __set_random_state__on_ground_ft[unaligned x](y);
    }
}


// Number of items in this function table MUST be a power of two
const __set_random_state__hovering_ft = [
    set_state__random_direction,
    set_state__random_direction,
    set_state__seeking_player,
    set_state__seeking_player,
    set_state__seeking_player,
    set_state__falling,
    set_state__throw_bombs_1,
    set_state__throw_bombs_2,
];


// Number of items in this function table MUST be a power of two
const __set_random_state__on_ground_ft = [
    set_state__rising,
    set_state__rising,
    set_state__rising,
    set_state__random_direction,
    set_state__on_ground_target_player,
    set_state__on_ground_target_player,
    set_state__throw_bombs_1,
    set_state__throw_bombs_2,
];



// WAITING ON GROUND
// =================


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__waiting_on_ground(entityId : u8 in y) {
    a = State.WAITING_ON_GROUND as u8;
    SoA_state[y] = a as State;

    x = y;
    SoA.zPos[x] = 0;
    SoA_zPos_sx[x] = 0;

    a = rng.random();
    if a < 0x30 {
        a = ON_GROUND_SHORT_DELAY;
    }
    else if a < 0xa0 {
        a = ON_GROUND_MEDIUM_DELAY;
    }
    else {
        a = ON_GROUND_LONG_DELAY;
    }
    SoA_timer[y] = a;

    ^return zero_velocities(y);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__waiting_on_ground(entityId : u8 in y) {
    x = y;
    SoA_timer[x]--;
    if zero {
        return set_state__rising(y);
    }
}



// RISING
// ======


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__rising(entityId : u8 in y) {
    a = State.RISING as u8;
    SoA_state[y] = a as State;

    queue_sound_effect(sound_effects.boss_rising);

    zero_velocities(y);

    // Required this function is called by the HURT state
    ^return set_ms_animation(y, ms_animations.standing);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__rising(entityId : u8 in y) {
    SoA_zPos_sx[y] = a = SoA_zPos_sx[y] + <:RISING_VELOCITY;
    SoA.zPos[y] = a = SoA.zPos[y] +# >:RISING_VELOCITY;

    if a >= HOVER_ZPOS_HEIGHT {
        ^return set_random_state(y);
    }
}



// RANDOM DIRECTION
// ================


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__random_direction(entityId : u8 in y) {
    a = State.RANDOM_DIRECTION as u8;
    SoA_state[y] = a as State;

    SoA_timer[y] = a = N_RANDOM_DIRECTION_FRAMES;

    // Select a random direction.
    ^return set_angle_velocity__fast(y, rng.random());
}


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__random_direction(entityId : u8 in y) {
    x = y;
    SoA_timer[x]--;
    if zero {
        ^return set_random_state(y);
    }

    ^return bounce_off_walls(y);
}



// SEEKING PLAYER
// ==============

// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__seeking_player(entityId : u8 in y) {
    a = State.SEEKING_PLAYER as u8;
    SoA_state[y] = a as State;

    SoA_timer[y] = a = MAX_SEEKING_FRAMES;
}


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__seeking_player(entityId : u8 in y) {
    x = y;
    SoA_timer[x]--;
    if zero {
        set_state__falling(y);
    }

    a = base.manhattan_distance_to_player(y);

    if a < SEEKING_TARGET_ACCURACY {
        return set_state__falling(y);
    }
    else if a >= SEEKING_FASTER_VELOCITY_DISANACE {
        // Set velocity based on distance to player
        set_velocity_to_target_player__fast(y);
    }
    else {
        set_velocity_to_target_player__slow(y);
    }
}



// FALLING
// =======

// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__falling(entityId : u8 in y) {
    a = State.FALLING as u8;
    SoA_state[y] = a as State;

    SoA_timer[y] = a = N_FALLING_ANTICIPATION_FRAMES;

    ^return zero_velocities(y);
}


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__falling(entityId : u8 in y) {

    a = SoA_timer[y];
    if !zero {
        // Side to side shake
        a--;
        SoA_timer[y] = a;

        if a < N_FALLING_SEEKING_FRAMES {
            ^return set_velocity_to_target_player__fast(y);
        }
        else {
            ^return _shake_boss(y, a);
        }
    }
    else {
        mem16();
        #[mem16] {
            x = y;

            SoA.xVelocity[unaligned x] = 0;
            SoA.yVelocity[unaligned x] = 0;

            // Add gravity
            SoA_zVelocity[unaligned x] = aa = SoA_zVelocity[unaligned x] - FALLING_GRAVITY;
        }
        mem8();

        // a = SoA_zVelocity_sx
        SoA_zPos_sx[y] = a = a + SoA_zPos_sx[y];
        swap_bytes(aa);
        // a = SoA_zVelocity_px
        SoA.zPos[y] = a +#= SoA.zPos[y];

        if !carry {
            return set_state__landed(y);
        }
    }
}



// LANDED
// ======

// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__landed(entityId : u8 in y) {
    a = State.LANDED as u8;
    SoA_state[y] = a as State;

    SoA_timer[y] = a = N_LANDING_RECOVERY_FRAMES;


    // Boss is on the ground.
    x = y;
    SoA.zPos[x] = 0;
    SoA_zPos_sx[x] = 0;


    a = base.manhattan_distance_to_player(y);
    if a < LANDED_HURT_PLAYER_DISTANCE {
        base.hurt_player__collision(y);
    }

    queue_sound_effect(sound_effects.rook_hits_ground);


    spawn_entity__clobbers_y(a = SoA.xPos_px[y],
                             a = SoA.yPos_px[y] + 4,
                             a = EntityTypes.smoke_particles as u8,
                             entities.smoke_particles.init_parameter.ground as u8);
    y = currentEntityId;
}


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__landed(entityId : u8 in y) {

    x = y;
    SoA_timer[x]--;
    if zero {
        ^return set_random_state(y);
    }
}



// ON GROUND TARGET PLAYER
// =======================

// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__on_ground_target_player(entityId : u8 in y) {
    a = State.ON_GROUND_TARGET_PLAYER as u8;
    SoA_state[y] = a as State;

    SoA_timer[y] = a = N_ON_GROUND_SHAKING_FRAMES;

    // Boss is on the ground.
    x = y;
    SoA.zPos[x] = 0;
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__on_ground_target_player(entityId : u8 in y) {

    a = SoA_timer[y];
    if !zero {
        a--;
        SoA_timer[y] = a;

        if zero {
            ^return set_velocity_to_target_player__fastest(y);
        }
        else {
            ^return _shake_boss(y, a);
        }
    }

    // Wait until collision with wall

    a = SoA.movementState[y];
    if a & MovementState.TILE_COLLISION != 0 {
        zero_velocities(y);

        queue_sound_effect(sound_effects.rook_hits_ground);

        ^return set_state__waiting_on_ground(y);
    }
}



// THROW BOMBS
// ===========



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__throw_bombs_1(entityId : u8 in y) {
    return __set_state__throw_bombs(y, State.THROW_BOMBS_1);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__throw_bombs_2(entityId : u8 in y) {
    return __set_state__throw_bombs(y, State.THROW_BOMBS_2);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func __set_state__throw_bombs(entityId : u8 in y, state : State in a) {
    SoA_state[y] = a as State;

    SoA_timer[y] = a = THROW_BOMB_DELAY + THROW_BOMB_COOLDOWN;

    ^return zero_velocities(y);
}



// Use the same process function for both states.
let process__throw_bombs_1 = __process__throw_bombs;
let process__throw_bombs_2 = __process__throw_bombs;


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func __process__throw_bombs(entityId : u8 in y) {

    a = SoA_timer[y];
    if zero {
        ^return set_random_state(y);
    }
    else {
        a--;
        SoA_timer[y] = a;

        if a == THROW_BOMB_COOLDOWN {
            a = SoA_state[y] as u8;
            if a == State.THROW_BOMBS_1 as u8 {
                // Throw bombs in pattern 1 (horizontally and vertically)
                spawn_bomb(y, 0);
                spawn_bomb(y, 8);
                spawn_bomb(y, 16);
                spawn_bomb(y, 24);
            }
            else {
                // Throw bombs in pattern 2 (diagonally)
                spawn_bomb(y, 4);
                spawn_bomb(y, 12);
                spawn_bomb(y, 20);
                spawn_bomb(y, 28);
            }

            queue_sound_effect(sound_effects.throw_bomb);
        }
    }
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func spawn_bomb(entityId : u8 in y, angle_32 : u8 in x) {

    spawn_entity__clobbers_y(a = SoA.xPos_px[y],
                             a = SoA.yPos_px[y],
                             a = EntityTypes.boss_bomb as u8,
                             x);
    y = currentEntityId;
}



// HURT
// ====


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__hurt__inline(entityId: u8 in y) {
    a = State.HURT as u8;
    SoA_state[y] = a as State;

    queue_sound_effect(sound_effects.enemy_hurt);

    zero_velocities(y);

    ^return set_ms_animation(y, ms_animations.hurt);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__hurt(entityId : u8 in y) {

    carry = is_ms_non_looping_animation_running(y);
    if !carry {
        set_state__rising(y);
    }
}



// DEAD
// ====


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__dead(entityId: u8 in y) {
    a = State.DEAD as u8;
    SoA_state[y] = a as State;

    // Mark boss defeated
    set_global_flag(SoA_globalFlag[y]);

    // Dead boss must still have health to be visible
    SoA.health[y] = a = 0xff;

    zero_velocities(y);

    // Stop music.
    // Having the boss music playing while the boss was defeated didn't sound right.
    // I tried changing the song to DungeonTheme but it did not feel right.
    // It also interfered with the sound effects (not a big deal as I could have worked around it)
    //
    // ::TODO load fanfare song and delay boss explosion::
    audio.queue_command_override_no_parameter(audio.Command.PAUSE_MUSIC_PLAY_SFX);

    ^return set_ms_animation(y, ms_animations.dead);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__dead(entityId : u8 in y) {

    carry = is_ms_non_looping_animation_running(y);
    if !carry {
        spawn_explosion(y, -7 as u8,    0 as u8);
        spawn_explosion(y,  7 as u8,    0 as u8);
        spawn_explosion(y,  0 as u8,  -12 as u8);
        spawn_explosion(y,  0 as u8,  -20 as u8);
        spawn_explosion(y,  5 as u8,  -33 as u8);
        spawn_explosion(y, -5 as u8,  -33 as u8);

        queue_sound_effect(sound_effects.explosion);

        // Despawn entity
        x = y;
        SoA.health[x] = 0;
    }
}


// NOTE: xOffset and yOffset are unchecked i8
//
// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func spawn_explosion(entityId : u8 in y, xOffset : u8 in a, yOffset : u8 in x)
{
    zpTmp_byte_0 = a = a + SoA.xPos_px[y];
    zpTmp_byte_1 = a = x + SoA.yPos_px[y];

    spawn_entity__clobbers_y(zpTmp_byte_0, zpTmp_byte_1,
                             a = EntityTypes.smoke_particles as u8,
                             x = entities.smoke_particles.init_parameter.explosion as u8);
    y = currentEntityId;
}





// Other functions
// ===============


// ::TODO cleanup velocity functions::


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func collided_with_player_bomb(entityId : u8 in y) {

    a = SoA_state[y] as u8;
    if a == State.DEAD as u8 {
        // Do nothing
    }
    else if a != State.HURT as u8 {
        a = SoA.health[y];
        a--;
        if negative || zero {
            ^return set_state__dead(y);
        }
        SoA.health[y] = a;

        ^return set_state__hurt__inline(y);
    }
}


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
inline func collided_with_player_weapon__inline(entityId : u8 in y) {
    queue_sound_effect(sound_effects.sword_hit_rook);
}


// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func zero_velocities(entityId : u8 in y) {
    mem16();
    #[mem16] {
        x = y;
        SoA.xVelocity[unaligned x] = 0;
        SoA.yVelocity[unaligned x] = 0;
        SoA_zVelocity[unaligned x] = 0;
    }
    mem8();
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_angle_velocity__fast(entityId : u8 in y, angle : u8 in a) {
    x = a = (a << 1) & CosineTables.TABLE_MASK;

    return __set_velocity_for_angle_32x2__fast(y, x);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8, fallthrough]
func set_velocity_to_target_player__fast(entityId : u8 in y) {
    x = base.calc_angle_to_player_32x2(y);
// fallthrough
}

// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func __set_velocity_for_angle_32x2__fast(entityId : u8 in y, unalignedCosineTableIndex : u8 in x) {
    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned y] = aa = CosineTables.Boss_Fast[unaligned x] as u16;

        #[idx16] {
            xx = aa = (xx + CosineTables.SINE_OFFSET) & CosineTables.TABLE_MASK;
        }
        SoA.yVelocity[unaligned y] = aa = CosineTables.Boss_Fast[unaligned x] as u16;

        x = y;
        SoA_zVelocity[unaligned x] = 0;
    }
    mem8();
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_velocity_to_target_player__slow(entityId : u8 in y) {

    x = base.calc_angle_to_player_32x2(y);

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned y] = aa = CosineTables.Boss_Slow[unaligned x] as u16;

        #[idx16] {
            xx = aa = (xx + CosineTables.SINE_OFFSET) & CosineTables.TABLE_MASK;
        }

        SoA.yVelocity[unaligned y] = aa = CosineTables.Boss_Slow[unaligned x] as u16;

        x = y;
        SoA_zVelocity[unaligned x] = 0;
    }
    mem8();
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_velocity_to_target_player__fastest(entityId : u8 in y) {

    x = base.calc_angle_to_player_32x2(y);

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned y] = aa = CosineTables.Boss_Fastest[unaligned x] as u16;

        #[idx16] {
            xx = aa = (xx + CosineTables.SINE_OFFSET) & CosineTables.TABLE_MASK;
        }

        SoA.yVelocity[unaligned y] = aa = CosineTables.Boss_Fastest[unaligned x] as u16;

        x = y;
        SoA_zVelocity[unaligned x] = 0;
    }
    mem8();
}



// ASSUMES a is frameCounter or timer
//
// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func _shake_boss(entityId : u8 in y, timer : u8 in a) {
    a &= 7;
    if zero {
        mem16();
        #[mem16] {
            x = y;
            SoA.xVelocity[unaligned x] = aa = FALLING_ANTICIPATION_VELOCITY;
            SoA.yVelocity[unaligned x] = 0;
        }
        mem8();

        return;
    }
    else if a == 4 {
        mem16();
        #[mem16] {
            x = y;
            SoA.xVelocity[unaligned x] = aa = -FALLING_ANTICIPATION_VELOCITY as u16;
            SoA.yVelocity[unaligned x] = 0;
        }
        mem8();

        ^return queue_sound_effect(sound_effects.boss_shake);
    }
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func bounce_off_walls(entityId : u8 in y) {

    a = SoA.movementState[y];
    if a & MovementState.X_AXIS_COLLISION != 0 {
        mem16();
        #[mem16] {
            SoA.xVelocity[unaligned y] = aa = 0 - SoA.xVelocity[unaligned y];
        }
        mem8();
    }

    a = SoA.movementState[y];
    if a & MovementState.Y_AXIS_COLLISION != 0 {
        mem16();
        #[mem16] {
            SoA.yVelocity[unaligned y] = aa = 0 - SoA.yVelocity[unaligned y];
        }
        mem8();
    }
}



}

}
}

