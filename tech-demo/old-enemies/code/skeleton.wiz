// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";
import "_vision_cone";

import "swarming";

import "gen/entities";


namespace entities {
namespace skeleton {


let SPEED = 0x0115;


enum State : u8 {
    WALK_SOUTH = 0,
    WALK_NORTH = 2,
    WALK_EAST = 4,
    WALK_WEST = 6,
};


in wram7e {

var SoA_state            : [ State     ; SoA.BA_SIZE ] in SoA.var_0_l;

}



in code {


// Entity process routine.
//
// Called when the entity is spawned
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in a) {

    if a == init_parameter.left as u8 {
        set_direction_west(y);
    }
    else if a == init_parameter.right as u8 {
        set_direction_east(y);
    }
    else if a == init_parameter.up as u8 {
        set_direction_north(y);
    }
    else if a == init_parameter.down as u8 {
        set_direction_south(y);
    }
    else {
        // parameter = init_parameter.swarm
        swarming.change_to_swarming_entity(y);
    }
}



// Entity process routine.
//
// Called once per frame.
//
// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {

    base.process_collisions(y);


    if collisionState $ CollisionState.ANY_PLAYER_WEAPON_BIT {
        ^return swarming.change_to_swarming_entity__player_sword_collision(y);
    }

    if collisionState $ CollisionState.PLAYER_HURTBOX_BIT {
        base.hurt_player__collision(y);

        // ::TODO add reaction when colliding with player hurtbox ::
    }


    x = SoA_state[y] as u8;
    return process__state_functions[unaligned x](y);
}


const process__state_functions = [
    process__walk_south,
    process__walk_north,
    process__walk_east,
    process__walk_west,
];



// DB = 0x7e
#[mem8, idx8]
func process__walk_south(entityId : u8 in y) {

    carry = vision_cone.test_down(y);
    if carry {
        ^return swarming.change_to_swarming_entity(y);
    }


    // Check for a tile collision in the previous frame
    a = SoA.movementState[y];
    if a & MovementState.X_AXIS_COLLISION != 0 {
        ^return set_direction_east(y);
    }
    else if a & MovementState.Y_AXIS_COLLISION != 0 {
        ^return set_direction_north(y);
    }


    // ::TODO check for solid tile 2 tiles below the entity ::
}



// DB = 0x7e
#[mem8, idx8]
func process__walk_north(entityId : u8 in y) {

    carry = vision_cone.test_up(y);
    if carry {
        ^return swarming.change_to_swarming_entity(y);
    }


    // Check for a tile collision in the previous frame
    a = SoA.movementState[y];
    if a & MovementState.X_AXIS_COLLISION != 0 {
        ^return set_direction_west(y);
    }
    else if a & MovementState.Y_AXIS_COLLISION != 0 {
        ^return set_direction_south(y);
    }


    // ::TODO check for solid tile 2 tiles above the entity ::
}



// DB = 0x7e
#[mem8, idx8]
func process__walk_east(entityId : u8 in y) {

    carry = vision_cone.test_right(y);
    if carry {
        ^return swarming.change_to_swarming_entity(y);
    }


    // Check for a tile collision in the previous frame
    a = SoA.movementState[y];
    if a & MovementState.X_AXIS_COLLISION != 0 {
        ^return set_direction_west(y);
    }
    else if a & MovementState.Y_AXIS_COLLISION != 0 {
        ^return set_direction_north(y);
    }


    // ::TODO check for solid tile 2 tiles to the right of the entity ::
}



// DB = 0x7e
#[mem8, idx8]
func process__walk_west(entityId : u8 in y) {

    carry = vision_cone.test_left(y);
    if carry {
        ^return swarming.change_to_swarming_entity(y);
    }


    // Check for a tile collision in the previous frame
    a = SoA.movementState[y];
    if a & MovementState.X_AXIS_COLLISION != 0 {
        ^return set_direction_east(y);
    }
    else if a & MovementState.Y_AXIS_COLLISION != 0 {
        ^return set_direction_south(y);
    }


    // ::TODO check for solid tile 2 tiles to the left of the entity ::
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_south(entityId : u8 in y) {
    x = y;

    SoA_state[x] = State.WALK_SOUTH;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = 0;
        SoA.yVelocity[unaligned x] = aa = SPEED as u16;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_south);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_north(entityId : u8 in y) {
    x = y;

    a = State.WALK_NORTH as u8;
    SoA_state[x] = a as State;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = 0;
        SoA.yVelocity[unaligned x] = aa = -SPEED as u16;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_north);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_east(entityId : u8 in y) {
    x = y;

    a = State.WALK_EAST as u8;
    SoA_state[x] = a as State;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = aa = SPEED;
        SoA.yVelocity[unaligned x] = 0;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_east);
}



// DB = 0x7e
#[mem8, idx8]
func set_direction_west(entityId : u8 in y) {
    x = y;

    a = State.WALK_WEST as u8;
    SoA_state[x] = a as State;

    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned x] = aa = -SPEED as u16;
        SoA.yVelocity[unaligned x] = 0;
    }
    mem8();

    ^return set_ms_animation(y, ms_animations.walk_west);
}


}

}
}

