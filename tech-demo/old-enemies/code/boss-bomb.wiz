// Copyright (c) 2022, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";

import "smoke-particles";
import "boss";
import "player-bomb";

import "../player";

import "gen/enums";
import "gen/cosine-tables";
import "gen/entities";


namespace entities {
namespace boss_bomb {


// ::TODO separate bomb sprite for the player::


let PICKUP_DISTANCE = player_bomb.PICKUP_DISTANCE;


let N_FRAMES_BEFORE_FAST_BOMB_ANIMATION = 15;

let BOMB_EXPLOSION_DISTANCE = 48;

let EXPLOSION_TIMER = 120;


let DESPAWN_TIMER = 8 * 60;



// (subpixels per frame per frame)
let FALLING_GRAVITY = 0x0044;


enum State : u8 {
    ACTIVE      = 0,
    DISARMED    = 2,
};



in wram7e_roomstate {

var SoA_state            : [ State     ; SoA.BA_SIZE ] in SoA.var_0_l;

var SoA_timer_l          : [ u8        ; SoA.BA_SIZE ] in SoA.var_1_l;
var SoA_timer_h          : [ u8        ; SoA.BA_SIZE ] in SoA.var_1_h;

var SoA_zPos_sx          : [ u8        ; SoA.BA_SIZE ] in SoA.var_2_l;

var SoA_zVelocity        : [ u16       ; N_ENTITIES ]  in SoA.var_3;
var SoA_zVelocity_sx     : [ u8        ; SoA.BA_SIZE ] in SoA.var_3_l;
var SoA_zVelocity_px     : [ u8        ; SoA.BA_SIZE ] in SoA.var_3_h;

}


in code {


// ASSUMES: parameter is valid (< 32)
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in a) {

    x = a = a << 1;
    mem16();
    #[mem16] {
        SoA.xVelocity[unaligned y] = aa = CosineTables.BossBombVelocity[unaligned x] as u16;

        #[idx16] {
            xx = aa = (xx + CosineTables.SINE_OFFSET) & CosineTables.TABLE_MASK;
        }

        SoA.yVelocity[unaligned y] = aa = CosineTables.BossBombVelocity[unaligned x] as u16;
    }
    mem8();


    x = y;
    SoA_state[x] = State.ACTIVE;

    SoA_timer_l[y] = a = EXPLOSION_TIMER;

    set_ms_animation(y, ms_animations.active);
}



// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {

    {
        // Apply gravity to zPos
        mem16();
        #[mem16] {
            SoA_zVelocity[unaligned y] = aa = SoA_zVelocity[unaligned y] - FALLING_GRAVITY;
        }
        mem8();
        // a = SoA_zVelocity_sx
        SoA_zPos_sx[y] = a = a + SoA_zPos_sx[y];
        swap_bytes(aa);
        // a = SoA_zVelocity_px
        SoA.zPos[y] = a +#= SoA.zPos[y];

        if !carry {
            // Bomb on the ground
            mem16();
            #[mem16] {
                x = y;
                SoA.xVelocity[unaligned x] = 0;
                SoA.yVelocity[unaligned x] = 0;
                SoA_zVelocity[unaligned x] = 0;
            }
            mem8();

            SoA.zPos[x] = 0;
        }
    }


    base.process_collisions(y);

    x = SoA_state[y] as u8;
    return process__state_functions[unaligned x](y);
}


const process__state_functions = [
    process__active,
    process__disarmed,
];



// Active state
// ============

// DB = 0x7e
#[mem8, idx8]
func process__active(entityId : u8 in y) {

    if collisionState $ CollisionState.ANY_PLAYER_WEAPON_BIT {
        ^return set_state__disarmed(y);
    }


    // ::TODO longer hurt animation state from bomb explosion::
    a = SoA_timer_l[y];
    if zero {
        // Bomb exploded
        a = base.manhattan_distance_to_player(y);
        if a < BOMB_EXPLOSION_DISTANCE {
            base.hurt_player__collision(y);

            a = sound_effects.explosion_hurt_player as u8;
        }
        else {
            a = sound_effects.explosion as u8;
        }
        queue_sound_effect(a as sound_effects);

        ^return entities.smoke_particles.change_to_smoke_entity(y, smoke_particles.init_parameter.explosion as u8);
    }
    else {
        a--;
        SoA_timer_l[y] = a;

        if a == N_FRAMES_BEFORE_FAST_BOMB_ANIMATION {
            // Does this do anything?::
            ^return set_ms_animation(y, ms_animations.active_fast);
        }
    }
}



// Disarmed state
// ==============

// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__disarmed(entityId : u8 in y) {
    a = State.DISARMED as u8;
    SoA_state[y] = a as State;

    SoA_timer_l[y] = a = <:DESPAWN_TIMER;
    SoA_timer_h[y] = a = >:DESPAWN_TIMER;

    change_ms_frameset(y, EntityTypes.player_bomb);
    set_ms_animation(y, ms_animations.stationary);

    ^return queue_sound_effect(sound_effects.boss_bomb_disabled);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func process__disarmed(entityId : u8 in y) {
    // Despawn bomb if it has been left alone for too long

    x = y;
    SoA_timer_l[x]--;
    if zero {
        SoA_timer_h[x]--;
        if zero {
            ^return entities.smoke_particles.change_to_smoke_entity(y, smoke_particles.init_parameter.small as u8);
        }
    }

    a = player.state as u8;
    if a == player.State.WALKING as u8 {
        a = entities.base.manhattan_distance_to_player(y);

        if a < PICKUP_DISTANCE {
            // Despawn bomb on the next frame
            x = y;
            SoA.health[x] = 0;

            ^return player.pickup_bomb__inline(y);
        }
    }
}


}

}
}

