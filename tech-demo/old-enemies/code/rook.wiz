// Copyright (c) 2021, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "../memmap";

import "engine/entity_api";
import "_base";

import "gen/enums";
import "gen/entities";


namespace entities {
namespace rook {

enum State : u8 {
    WAIT    = 0,
    RISING  = 2,
    FALLING = 4,
    DEAD    = 6,
};


// Time to wait inbetween jumps (in frames).
let JUMP_DELAY = 40;


// Time to wait before despawning the entity when it has died (in frames).
let DEAD_WAIT = 80;



// Jump Velocity (subpixels per frame)
let JUMP_VELOCITY = 0x0180;


// Rising zPos deceleration (subpixels per frame per frame)
let RISING_GRAVITY = 0x0015;

// Falling zPos acceleration (subpixels per frame per frame)
let FALLING_GRAVITY = RISING_GRAVITY * 9;



in wram7e {

var SoA_state            : [ State     ; SoA.BA_SIZE ] in SoA.var_0_l;

var SoA_tileIndex        : [ u8        ; SoA.BA_SIZE ] in SoA.var_0_h;

var SoA_timer            : [ u8        ; SoA.BA_SIZE ] in SoA.var_1_l;

var SoA_zPos_sx          : [ u8        ; SoA.BA_SIZE ] in SoA.var_1_h;

var SoA_zVelocity        : [ u16       ; N_ENTITIES ]  in SoA.var_2;
var SoA_zVelocity_sx     : [ u8        ; SoA.BA_SIZE ] in SoA.var_2_l;
var SoA_zVelocity_px     : [ u8        ; SoA.BA_SIZE ] in SoA.var_2_h;

// The dungeon flag for the rook enemy
var SoA_dungeonFlag      : [ u8        ; SoA.BA_SIZE ] in SoA.var_3_l;

}


in code {


// parameter = rook destroyed dungeon flag
//
// DB = 0x7e
#[mem8, idx8]
func init(entityId : u8 in y, parameter : u8 in a) {
    SoA_dungeonFlag[y] = a;

    zero = is_dungeon_flag_clear_a(a);
    if !zero {
        // The rook was destroyed up by a bomb on a previous visit.
        // Do not show the 'entity dead' smoke particle.
        a = 0;
        SoA.health[y] = a;
        SoA.deathFunction[y] = a;
        return;
    }

    // Force entity to the middle of a tile
    SoA.xPos_px[y] = a = (SoA.xPos_px[y] & 0xf0) |  8;
    SoA.yPos_px[y] = a = (SoA.yPos_px[y] & 0xf0) | 10;

    set_ms_animation(y, ms_animations.standing);

    SoA_tileIndex[y] = a = x = get_tile_index_under_entity(y);

    return set_state__wait(y);
}



// DB = 0x7e
#[mem8, idx8]
func process(entityId : u8 in y) {
    // ::TODO add a sword collision test (without a tile test).  Play sword_hit_rook sound effect::

    carry = base.test_player_bomb_collision(y);
    if carry {
        set_state__dead__inline__clobbers_y(y);
        return;
    }

    x = SoA_state[y] as u8;
    return process__state_functions[unaligned x](y);
}


const process__state_functions = [
    process__wait,
    process__rising,
    process__falling,
    process__dead,
];



// NOTE: Does not change the current MS animation.
//
// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__wait(entityId : u8 in y) {
    x = y;
    SoA_state[x] = State.WAIT;
    SoA.zPos[x] = 0;

    SoA_timer[y] = a = JUMP_DELAY;
}



// DB = 0x7e
#[mem8, idx8]
func process__wait(entityId : u8 in y) {
    a = SoA_timer[y];
    if zero {
        return set_state__rising(y);
    }
    a--;
    SoA_timer[y] = a;

    // Set tile under the entity solid.
    // This must be here as room_transitions will reset tile properties after room event init
    // (ie, entities are spawned).
    ^return set_tile_solid(SoA_tileIndex[y]);
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__rising(entityId : u8 in y) {
    a = State.RISING as u8;
    SoA_state[y] = a as State;


    SoA_zVelocity_sx[y] = a = <:JUMP_VELOCITY;
    SoA_zVelocity_px[y] = a = >:JUMP_VELOCITY;

    x = y;
    SoA.zPos[x] = 0;
    SoA_zPos_sx[x] = 0;

    set_ms_animation(y, ms_animations.rising);
}



// DB = 0x7e
#[mem8, idx8]
func process__rising(entityId : u8 in y) {
    mem16();
    #[mem16] {
        SoA_zVelocity[unaligned y] = aa = SoA_zVelocity[unaligned y] - RISING_GRAVITY;
    }
    mem8();

    if negative {
        return set_state__falling(y);
    }

    // a = SoA_zVelocity_sx
    SoA_zPos_sx[y] = a = a + SoA_zPos_sx[y];
    swap_bytes(aa);
    // a = SoA_zVelocity_px
    SoA.zPos[y] = a = a +# SoA.zPos[y];
}



// KEEP: Y
// DB = 0x7e
#[mem8, idx8]
func set_state__falling(entityId : u8 in y) {
    a = State.FALLING as u8;
    SoA_state[y] = a as State;

    x = y;
    SoA_zVelocity_sx[x] = 0;
    SoA_zVelocity_px[x] = 0;

    ^return set_ms_animation(y, ms_animations.falling);
}



// DB = 0x7e
#[mem8, idx8]
func process__falling(entityId : u8 in y) {
    mem16();
    #[mem16] {
        SoA_zVelocity[unaligned y] = aa = SoA_zVelocity[unaligned y] - FALLING_GRAVITY;
    }
    mem8();

    // a = SoA_zVelocity_sx
    SoA_zPos_sx[y] = a = a + SoA_zPos_sx[y];
    swap_bytes(aa);
    // a = SoA_zVelocity_px
    a +#= SoA.zPos[y];

    if !carry {
        // Rook is on the ground.
        SoA.zPos[y] = a = 0;
        set_ms_animation(y, ms_animations.landing);

        set_state__wait(y);

        // ::TODO repel player from rook if player is close to the rook::

        queue_sound_effect(sound_effects.rook_hits_ground);

        ^return spawn_entity__clobbers_y(a = SoA.xPos_px[y],
                                         a = SoA.yPos_px[y] + 4,
                                         a = EntityTypes.smoke_particles as u8,
                                         entities.smoke_particles.init_parameter.ground as u8);
    }
    SoA.zPos[y] = a;
}



// DB = 0x7e
#[mem8, idx8]
func set_state__dead__inline__clobbers_y(entityId : u8 in y) {
    a = State.DEAD as u8;
    SoA_state[y] = a as State;

    SoA_timer[y] = a = DEAD_WAIT;

    set_ms_animation(y, ms_animations.dead);

    set_dungeon_flag(SoA_dungeonFlag[y]);

    // Remove tile solid flag
    ^return reset_tile_properties__clobbers_y(SoA_tileIndex[y]);
}



// DB = 0x7e
#[mem8, idx8]
func process__dead(entityId : u8 in y) {
    a = SoA_timer[y];
    if zero {
        // set health to 0 when timer is 0
        SoA.health[y] = a;
    }
    a--;
    SoA_timer[y] = a;
}


}


}
}

